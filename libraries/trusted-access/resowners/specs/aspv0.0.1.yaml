#Default Parameters needed for a YAML file
openapi: 3.0.0
servers:
  - url: 'https://asp.ndiplay.cf/api/v1' #sandbox API link
    description: NDI API Sandbox
info:
  version: 1.0.0
  title: National Digital Identity (NDI) - ASP API
  termsOfService: 'http://ndi.sg.io/terms/'
  contact:
    email: apiteam@ndi.sg.io
  x-logo:
    url: '/assets/trusted-access/img/ndi-logo.png'
  license:
    name: Apache-2.0
    url: 'https://opensource.org/licenses/Apache-2.0'
  description: |
    This is the API store where you can discover everything about integrating
    with the National Digital Identity (NDI) platform.  You can find out more
    about NDI at [here](http://{Insert Valid URL here}).  To try out the
    API, first go to the Authorization section to learn how to obtain an access
    token to access the API.

    <ul>
        <li> Access technical reference for mobile developers <a href="https://isomerpages.github.io/isomerpages-ndi/files/techref/appdev/appdev">here</a></li>
        <li> Access technical reference for web developers <a href="https://isomerpages.github.io/isomerpages-ndi/files/techref/appdev/webdev">here</a></li>
        <li> Access technical reference for Resource Operators <a href="https://isomerpages.github.io/isomerpages-ndi/files/techref/aspproviders/aspprov">here</a></li>
    </ul>

    # Release Notes
      * 1.0.0(Release Date)
        * Initial release of API
      ## Release Notes and Compatibility
      Explain what kind of versioning are we use here

    # Overview
      The Authentication Service Provider (ASP) is a key component of the NDI platform which performs authentication and authorization.  Client apps accessing resources (API, data) in protected domains (e.g. Government agency, bank systems) may invoke the ASP to authenticate the end-user and obtain the access tokens to access the protected resources.
      Client apps invoke the ASP through an interface and interaction flows based on the widely supported OpenID Connect (OIDC) specifications.
      The ASP can be federated � it may be run and operated independently from the Government NDI cluster, e.g. a financial institution may run an instance of ASP on its platform to serve the needs of its applications.
      <br><br>

      The ASP may be operated in the 2 modes � as an OIDC Provider, or as a pure-play authenticator.  The operating modes will decide how relying parties (i.e. the client app) and the Authorization Server of the federated site interact with the ASP.  In both modes, the ASP is only responsible for authenticating the user and generates the ID token, it is the organization�s Authorization Server which determines whether the relying party and the
      user are authorized to access its protected resources and issues the access token accordingly.

      ## Mode 1: ASP as an OpenID Connect Provider

      <img style="width:50%; margin-left:auto; margin-right:auto; display:block" src="assets/openIDProvider.png"/>

      The ASP acts as an OIDC Provider, handling the OIDC flow with the relying party.  This operating mode is useful for organizations which are planning to expose their capabilities through API and may not have a OAuth 2.0/OIDC enabled Authorization Server.  During the OIDC flow, the ASP performs user authentication with the user�s NDI form factor, on successful authentication, it calls the organization�s Authorization Server to obtain an access token.  The Authorization Server determines whether the relying party and user has proper access (based on the organization�s access policy) and generates the access token accordingly.  The ASP returns the access token to the relying party which may then use it to access protected resources.
      <br><br>
      In this operating mode, the ASP integrates with the Authorization Server of the organization through the Domain Authorization Interface.

      ## Mode 2: ASP as an Authenticator

       <img style="width:50%; margin-left:auto; margin-right:auto; display:block" src="assets/authenticator.png"/>

      The ASP acts as an authenticator service which the Authorization Server calls to perform user authentication with the user�s NDI form factor.  This operation mode is applicable for organizations which are already offering OAuth 2.0 or OIDC based authorization to relying parties accessing their protected resources.  In this scenario, organizations typically use an Authorization Server (or IAM) module to handle the OAuth 2.0/OIDC flows with relying parties.  During the OAuth 2.0/OIDC flow, the Authorization Server module calls the ASP authentication API to perform user authentication with the user�s NDI form factor.  On successful user authentication, the Authorization Server determines whether the relying party and user have the proper access (based on the organization�s access policies), then generates and returns an access token to the relying party which it uses to access protected resources.
      <br><br>
      In this operating mode, the Authorization Server of the organization will integrate with the ASP through the ASP Authentication API.

    # Environment
      Insert related stuff here

    # Security
      Insert security related content here

      ## OAuth 2.0
      NDI APIs will be using the OAuth2.0 workflow to perform authentication & authorisation.
      The sequence diagram illustrates the steps involved to integrate your API with NDI <br>
      {Insert image here}

    # Error Handling
      Insert content of Error Handlin here

    # Support
      For Technical queries, you may contact XXXX@someemail.gov.sg
      For business queries, you may contact XXXX@someemail.gov.sg


#The above sections starting with # indicates a section by itself. To add more content simply Use # to represent a new section
#These are all non APIs related documentations, API definitions should all be below


#These are the tags for the side bar (the one on the left)
tags:


  - name: User Authentication
    description: >-
      These end points are called to perform User Authentication. After the endpoints are called, a form factor will be sent
      to the user's preferred form factor.


  - name: Certificates, Token & Configurations
    description: >-
      Operations for Digital Certificates. The services for this category includes: </br> </br>
      <b>1. Exchange for the security tokens (ID token and access token) with the authorization code</b> </br>
      <b>2. Get the JWK Set containing the ASP signing keys<b>

#x-Tag groups are used to further group the tags
x-tagGroups:
  - name: API Definitions
    tags:
      - User Authentication
      - Certificates, Token & Configurations

#=============================== ASP Oauth2 start ===========================
paths:

  '/asp/auth':
    get:
      tags:
        - User Authentication
      summary: Initiate user authentication or authorization (GET)
      description: >-
        OIDC authorization endpoint. The client call this endpoint to start the
        OIDC flow.  The ODIC flow consists of both user authentication and
        authorization.  The authorization endpoint performs the user authentication
        part of the OIDC flow, resulting in an authorization code given to the
        calling client which it use to call the token endpoint to continue with
        the authorization part of the OIDC flow.<br><br>

        These are the different ways the client may interact with the ASP to
        carry out user authentication: <br>


        1. Use the standard NDI Login page for user authentication.  The client
        redirects the user agent to this endpoint, which returns the NDI Login page
        for the user to enter his credentials for authentication.  In the case of
        NDI ASP, the login consists only the user id input (i.e. no password input)
        for the user enter his NDI id. The NDI Login page then interacts with the
        ASP to initiate user authentication. The ASP routes sends an
        authentication challenge to the user's form factor (e.g. the soft token on
        his mobile device) via the appropriate form factor authentication servce.
        For mobile soft token, the user is notified to enter his PIN in the NDI App
        to unlock the soft token to sign on the authentication challenge.  <br><br>

        2. The client uses its own login page to capture the user NDI id, and calls
        this endpoint passing-on the NDI id. Similar to point 1, The ASP routes also sends an
        authentication challenge to the user's form factor (e.g. the soft token on
        his mobile device) via the appropriate form factor authentication servce.
        For mobile soft token, the user is notified to enter his PIN in the NDI App
        to unlock the soft token to sign on the authentication challenge. <br><br>

        3. Use QR code.  The client calls this endpoint to request for a QR code
        which encodes the authentication challenge, it then displays on its login
        page to let the user scan with his NDI App. The NDI App will then let the user
        enter his PIN to unlock the soft token to sign on the authentication
        challenge. <br><br>

        4. If the client is a trusted mobile app, it may interact with the NDI App
        through the NDI mobile SDK, which calls this endpoint to obtain an
        authentication challenge.  The NDI App let the user
        enter his PIN to unlock the soft token to sign on the authentication
        challenge. <br><br>


        The NDI App returns the signed response generated by the mobile soft token
        to the ASP (through the ASP callback uri) which verifies the signature on
        the signed response with the user's certificate.  If all is well, the ASP
        generates an authorization code and sends it to the client via the client's
        redirect uri.  The client may then proceed with the authorization part of
        the OIDC flow by calling the ASP token endpoint to exchange for the
        security tokens (i.e. id token and access token) using the authorization
        code in accordance to the authorization code grant flow.
      operationId: initiateAuth
      parameters:
        - name: client_id
          in: query
          description: >-
            The client id of the calling client app.
          required: true
          schema:
            type: string

        - name: nonce
          in: query
          description: >-
            A random unqiue reference generated by the client, which will be
            included in the ID token returned by the ASP on successful user
            authentication. The client may use this to tie the ID token to a
            particular authenticated session.
          required: true
          schema:
            type: string

        - name: scope
          in: query
          description: >-
             The scope of access requested for, this is a string of space-
             delimited references representing protected resources;
          schema:
            type: string

        - name: response_type
          in: query
          description: >-
            The response type, may be code or idtoken. Default to code if not
            specified.
          required: false
          schema:
            type: string

        - name: state
          in: query
          description: >-
            The random string generated by the client to counter CSRF, if
            specified, the ASP will include it as part of the redirect url
            when returning the authorization code to the client's redirect
            uri.  The client is to match the value of the state returned with
            its copy to ensure the redirect is from the ASP.
          required: false
          schema:
            type: string

        - name: acr_values
          in: query
          description: >-
            {Description to be added}
          required: false
          schema:
            type: string

        - name: ndi_id
          in: query
          description: >-
            {Description to be added}
          required: false
          schema:
            type: string

        - name: prompt
          in: query
          description: >-
            {Description to be added}
          required: false
          schema:
            type: string

        - name: display
          in: query
          description: >-
            {Description to be added}
          required: false
          schema:
            type: string

      responses:
        '200':
          description: Success, the NDI Login page
          content:
            text/html:
              schema:
                  type: string
                  format: html
        '302':
          description: >
            If the NDI Id is provided, the ASP returns the authorization code
            via redirect to the client's redirect uri.
          content:
            text/html:
              schema:
                  type: string
                  format: html
        '500':
          description: Error
          content:
            application/json:
              schema:
                  type: object
                  properties:
                      err_msg :
                          description: error message
                          type: string
      security: []
    post:  #There is a GET and POST for authentication, therefore there is 2 diff separate one
      tags:
        - User Authentication
      summary: Initiate user authentication or authorization (POST)
      description: >-
        This works exactly the same as GET authentication above.
      operationId: initiateAuth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  description: The client id assigned to the client <b>(Mandatory)</b>
                  type: string

                nonce:
                  description: >-
                    A random unqiue reference generated by the client, which will be
                    included in the ID token returned by the ASP on successful user
                    authentication. The client may use this to tie the ID token to a
                    particular authenticated session. <b>(Mandatory)</b>
                  type: string

                  scope:
                    description: The scope of access required
                    type: string

                  response_type:
                    description: The response type, may be code or idtoken. Default to code if not specified.
                    type: string

                  state:
                    description: >-
                      The random string generated by the client to counter CSRF, if
                      specified, the ASP will include it as part of the redirect url
                      when returning the authorization code to the client's redirect
                      uri.  The client is to match the value of the state returned with
                      its copy to ensure the redirect is from the ASP.
                    type: string

                    acr_values:
                      description: >-
                        The client may capture the user's NDI Id using its UI instead of the
                        NDI Login page. To suppress the NDI Login page, it may pass the NDI
                        Id to the ASP by setting login_hint to the NDI Id and setting the
                        prompt parameter to none.
                      type: string

                    prompt:
                      description: >-
                        Description to be added
                      type: string

                  #sample Data for this call
                  example:
                    client_id: sample_client_id
                    nonce: Insert sample nonce here
                    scope: Insert sample scope here
                    response_type: Insert sample response type here
                    state: Insert sample state here
                    acr_values: Insert example here
                    prompt: Insert example here

      responses:
        '200':
          description: Success, the NDI Login page
          content:
            text/html:
              schema:
                  type: string
                  format: html
        '302':
          description: >
            If the NDI Id is provided, the ASP returns the authorization code
            via redirect to the client's redirect uri.
          content:
            text/html:
              schema:
                  type: string
                  format: html
        '500':
          description: Error
          content:
            description: Success, the NDI Login page
            content:
              text/html:
                schema:
                    type: string
                    format: html

  '/asp/responses':
    post:
      tags:
        - User Authentication
      operationId: responses
      summary: Callback endpoint called by form factor
      description: >-
        This is the callback endpoint called by the form factor (or form factor
        authenticator service) to return the signed response to the originating
        ASP of the authentication challenge. <br/><br/>
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ff_auth_ref:
                  type: string
                  description: The form factor authentication reference

                usr_action:
                  type: string
                  description: This may be 'accept', 'consent' or 'reject'

                response:
                  type: string
                  description: The signed response (an encoded JWS), this is not present if
                    usr_action is 'reject'
              example:
                ff_auth_ref: insert example here
                usr_action: insert example here
                response: insert example here

      responses:
        '200':
          description: "Sucess"
        '500':
          description: "Error"

  '/asp/responses/qrcodes':
    post:
      tags:
        - User Authentication
      operationId: initiateQRAuth
      summary: QR Code Authentication
      description: >-
        This is the callback endpoint called by the form factor (or form factor
        authenticator service) to return the signed response to the originating
        ASP of the authentication challenge.  This is for FF authentication based
        on QR code.

      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                ff_auth_ref:
                  description: The Form factor authentication reference
                  type: string
                ndi_id:
                  description: The User's NDI ID
                  type: string
                usr_action:
                  description: This may be accept, consent or reject
                  type: string
                response:
                  description: The signed response (encoded JWS). This is not present if usr_action is reject
                  type: string

      responses:
        '302':
          description: Return signed responses to the originating ASP of Auth challenge
          content:
            text/html:
              schema:
                  type: string
                  format: html

  '/asp/auth/login':
    post:
      tags:
        - User Authentication
      summary: Endpoint called by the NDI Login page
      description: >-
        This endpoint is called by the NDI Login page when the user click the
        OK button, passing over the user NDI id.  This will initiate user
        authentication by sending an authentication challenge (via the form
        factor authenticator service) to the user's form factor.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                oid_ref:
                  type: string
                  description: An unique reference for this authentication instance
                ndi_id:
                  type: string
                  description: The User's NDI ID

      responses:
        '302':
          description: Send an authentication challenge to the User's Form factor
          content:
            text/html:
              schema:
                  type: string
                  format: html

  '/asp/token':
    post:
      tags:
        - Certificates, Token & Configurations
      summary: Exchange for the security tokens (ID token and access token) with the
        authorization code obtained from the authorization endpoint.
      description: |
        OAuth2.0 token endpoint. Your client app calls this endpoint to exchange
        for the security tokens (ID token and access token) with the authorization
        code obtained from the authorization endpoint after a successful user
        authetication/authorization.

      requestBody:
        content:
          application/json:
            schema:      # Request body contents
              type: object
              properties:
                code:
                  type: string
                client_id:
                  type: string
                client_secret:
                  type: string
              example:   # Sample object
                code: 10aet620pz49
                client_id: WA.102396842
                client_secret: c213nts3c53t
      responses:
         '200':
          description: |
            Successfully returned the security tokens.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id_token:
                    type: string
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
                example:   # Sample object
                  id_token: eyJ0eXAiOiJKV1QiLCJraWQiOiIxLjMuNi4xLjQuMS43MjcyMi4zLjEiLCJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJpY2ViZWFyMS5hc3AiLCJzdWIiOiI3NGVjNjYyMC0yODI5LTExZTgtOThmYi00M2Q5Nzc1ODAxMmUiLCJhdWQiOiJkZW1vd2FwcCIsImlhdCI6MTUyMTU5MTczOTM2OCwiZXhwIjoxNTIxNTkxNzM5OTY4LCJub25jZSI6ImU2YjA5NTYwLTJjOWQtMTFlOC1hODM3LTQ1YzEyODNlYzBiNSJ9.1PMiPJQwP8ziOMJS5X4-1xPMOnuIpOV3y-NjkFJTboa23fPwxzwNpe2FZigLglhDcglnwNzbLB1_o_1UPZjYVw
                  access_token: eaddc450-2c9d-11e8-a837-45c1283ec0b5
                  expires_in: 600
                  token_type: Bearer

  '/asp/certs':
    get:
      tags:
        - Certificates, Token & Configurations
      summary: Get the JWK Set containing the ASP signing keys.
      description: >-
        Get the JSON Web Key (JWK) Set containing the signing keys of this ASP.
        The signing keys (i.e. public keys) are used by the form factor local agent
        (or the form factor authenticator) to verify the signed challenges sent by
        the ASP. The signing key to use for verification is indicated by the kid
        value in the header of the signed challenge JWS. The JWK set is to be
        downloaded periodically as the ASP refreshes its signing keys regularly.
      operationId: getJwks
      responses:
        '200':
          description: Success, the JWK Set
          content:
            application/json:
              schema:
                type: object
                properties:
                  keys:
                    type: object
                    properties:
                      kty:
                        type: integer
                      crv:
                        type: string
                    example:
                      - kty: EC
                        crv: P-256
                        x: cobxoYr4GfP1PDZ5GT47Z4L3Z4xhbwetX05WaBBgEo0=
                        y: DajZqnjn1YNL8nNCBVdBbdRq71Zv63/DegY9GXqvnZ0=
                        kid: 1.3.6.1.4.1.72722.3.1
                        use: sig
                      - kty: EC
                        crv: P-256
                        x: cxrYBCTNI89USDjo11ySs3526iDZ8AiTo7Tu6KPAqv7D4",
                        y: as63vwsdgocXsafgag79vdsaVp7x8PxltjkkbbM4IFyM",
                        use: sig
                        kid: 1.3.6.1.4.1.72722.3.9
        '500':
          description: Error
          content:
            application/json:
              schema:
                  type: object
                  properties:
                      err_msg :
                          description: error message
                          type: string
      security: []

  '/asp/.well-known/openid-configuration':
    get:
      tags:
        - Certificates, Token & Configurations
      summary: Get OpenID Connect Discovery document of this ASP
      description: >-
        Get the OpenID Connect discovery document of this ASP. The discovery
        document is downloaded by relying parties to find out the onfiguration of
        and capabilities supported by the ASP e.g. authorization url, token url,
        etc.  Relying parties should download the discovery document periodically
        as ASP configuration may change from time to time.
        Response: the response body contains the discovery document.
      operationId: getOpenidConfig
      responses:
        '200':
          description: "Success"
        '500':
          description: "Error"

externalDocs:
  description: Find out more about NDI here.
  url: 'http://ndi.sg.io/home'

security: []
