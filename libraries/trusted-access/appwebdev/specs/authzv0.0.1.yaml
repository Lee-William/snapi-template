#Default Parameters needed for a YAML file
openapi: 3.0.0
servers:
  - url: 'https://sandbox.demo.ndi.gov.sg/as' #sandbox API link
    description: NDI API Sandbox
info:
  version: 0.3.2
  title: National Digital Identity (NDI) - Domain Authorization
  termsOfService: 'https://www.ndi-api.gov.sg/termsofuse/'
  contact:
    email: ndi_support@ndi.gov.sg
  x-logo:
    url: '/assets/lib/trusted-access/img/ndi-logo-sm.png'
  description: >-
    The authorization service (otherwise known as domain authorization service) takes care of verifying whether issued tokens 
    (e.g. id tokens and access tokens) are valid.

    This service also allow ASPs to exchange access tokens based on OAuth2.0 standards.
    The exchanging of tokens is usually initiated by ASPs when a valid authorization code 
    is presented by a client app to ASP. The ASP will first generate a ID token and uses the 
    id token to call this service to exchange for an access token. 

    # Release Notes
      * 0.3.2 (Release Date)
        * Initial release of API

    # Overview
      The Authorization Service Provider is a key component of the NDI platform which performs authorization to determine if client apps are eligible to access resources (API, data) in protected domains (e.g. Government agency, bank systems) may invoke the ASP to authenticate the end-user and obtain the access tokens to access the protected resources.
      <br><br>

      ## Mode 1: ASP as an OpenID Connect Provider

      <img style="width:50%; margin-left:auto; margin-right:auto; display:block" src="../img/openIDProvider.png"/>

      The ASP acts as an OIDC Provider, handling the OIDC flow with the relying party.  This operating mode is useful for organizations which are planning to expose their capabilities through API and may not have a OAuth 2.0/OIDC enabled Authorization Server.  During the OIDC flow, the ASP performs user authentication with the user's NDI form factor, on successful authentication, it calls the organization's Authorization Server to obtain an access token.  The Authorization Server determines whether the relying party and user has proper access (based on the organization's access policy) and generates the access token accordingly.  The ASP returns the access token to the relying party which may then use it to access protected resources.
      <br><br>
      In this operating mode, the ASP integrates with the Authorization Server of the organization through the Domain Authorization Interface.

      ## Mode 2: ASP as an Authenticator

       <img style="width:50%; margin-left:auto; margin-right:auto; display:block" src="../img/authenticator.png"/>

      The ASP acts as an authenticator service which the Authorization Server calls to perform user authentication with the user's NDI form factor.  This operation mode is applicable for organizations which are already offering OAuth 2.0 or OIDC based authorization to relying parties accessing their protected resources.  In this scenario, organizations typically use an Authorization Server (or IAM) module to handle the OAuth 2.0/OIDC flows with relying parties.  During the OAuth 2.0/OIDC flow, the Authorization Server module calls the ASP authentication API to perform user authentication with the user's NDI form factor.  On successful user authentication, the Authorization Server determines whether the relying party and user have the proper access (based on the organization's access policies), then generates and returns an access token to the relying party which it uses to access protected resources.
      <br><br>
      In this operating mode, the Authorization Server of the organization will integrate with the ASP through the ASP Authentication API.

#These are the tags for the side bar (the one on the left)
tags:
  - name: Domain Authorization Interface
    description: Domain Authorization Interface

paths:
  '/token':
    post:
      tags: 
       - Domain Authorization Interface
      summary: Exchange for an access token from thr authorization service
      description: >-
        This ASP is called by ASP to send a signed challenge (JWS) to the target
        form factor, in the form of an authentication request.
      operationId: exchangeToken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  description: The client's ID
                  type: string
                grant_type:
                  description: It must be 'urn:ietf:params:oauth:grant-type:token-exchange
                  type: string
                subject_token:
                  description: The ID token generated by the ASP after a successful user authentication
                  type: string
                subject_token_type:
                  description: It must be 'urn:ietf:params:oauth:token-type:id_token
                  type: string
                scope:
                  description: The scope of access requested
                  type: string
                requested_token_type:
                  description: Set to 'urn:ietf:params:oauth:token-type:access_token' to exchange for an access token
                  type: string
              example:
                client_id: demowapp2
                grant_type: urn:ietf:params:oauth:grant-type:token-exchange
                requested_token_type: urn:ietf:params:oauth:token-type:access_token
                scope: openid
                subject_token: eyJ0eXAiOiJKV1QiLCJraWQiOiIxLjMuNi4xLjQuMS43MjcyMi4zLjEiLCJhbGciOiJFUzI1NiJ9.eyJpc3MiOiJpY2ViZWFyMS5hc3AiLCJzdWIiOiJiNzU1NTI3MC02NTYzLTExZTgtOWNhMS05MWFlNzQwZDZhMDAiLCJhdWQiOiJkZW1vd2FwcDIiLCJkbiI6IndhcHAyLm5kaWRlbW8uY2YiLCJpYXQiOjE1Mjc4MzQxNDQzNTgsImV4cCI6MTUyNzgzNDE0NDk1OCwibm9uY2UiOiIyMDg2Y2JjMC02NTY0LTExZTgtYTE2ZS0wOWNjZGYxNmJkZTEifQ.kwTkW8DKq1PAHNjt4U_GBbCPsmeCSou2u7lNp1S1WoC13EQXxk5xlr4GsCwwQKONBgfbJaqK9vSokmOhRbiAhw
                subject_token_type: urn:ietf:params:oauth:token-type:id_token
                
      responses: 
        '200':
          description: "Success"
          content:
              application/json:
                schema:
                  type: object
                  properties: 
                    access_token:
                        description: The access token
                        type: string
                    issued_token_type:
                        description: urn:ietf:params:oauth:token-type:access_token
                        type: string
                    token_type:
                        description: Bearer
                        type: string
                    expires_in:
                        description: The remaining life time of the access token, in seconds
                        type: number
                  example:
                    access_token: 9ebe7940-6567-11e8-81d0-63274d553685
                    issued_token_type: urn:ietf:params:oauth:token-type:access_token
                    token_type: Bearer
                    expires_in: 600

        '400':
          description: "Error"
        
  '/token/verifications':
      post:
        tags:
          - Domain Authorization Interface
        summary: Verify the given access token with the authorization service.
        description: >-
          Verify the given access token with the authorization service.  The endpoint
          is usually called by the API Gateway or the micro-service itself to verify 
          the access token presented by the client before granting access to the
          requested resource/transaction.  The verification checks whether the access
          token was issued by this authorization service, has it expired, was it
          issued to the given client (client id) and user (uuid).  If a scope is
          given, it checks whether the scope is within the scope granted to this 
          access token.
        operationId: verifyAccessToken
        requestBody:
            content:
                application/json:
                    schema:
                        type: object
                        properties:
                          access_token:
                              description: The access token to verify
                              type: string
                          client_id:
                              description: The client's Id
                              type: string
                          uuid:
                            description: The uuid of the user 
                            type: string
                          scope:
                            description: >-
                              The scope of access requested, this may be a reference to a
                              protected domain/API/resource, must be a value contained in the
                              scope recorded by the authorization service for this access
                              token. If not provided, it will not be checked
                            type: string
                        example:
                          client_id: demowapp2
                          scope: openid
                          access_token: 9ebe7940-6567-11e8-81d0-63274d553685
                          uuid: fc7ab360-6557-11e8-935f-937a8aa9248

