#Default Parameters needed for a YAML file
openapi: 3.0.0
servers:
# Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/sohhaofeng1989/ndi-gt-hash-signing/2.0.0
  - url: 'https://sandbox.api.ndi.gov.sg/api/v2/hss' #sandbox API link
    description: NDI API Sandbox
info:
  version: "2.0.0"
  title: National Digital Identity (NDI) - Hash Signing API
  termsOfService: 'https://www.ndi-api.gov.sg/termsofuse/'
  contact:
    email: ndi_support@ndi.gov.sg
  x-logo:
    url: '/assets/lib/trusted-access/img/ndi-logo-sm.png'
  description: |
    This is the API store where you can discover everything about integrating
    with the National Digital Identity (NDI) platform's hash signing service.

    Kindly do note that NDI's Hash-Signing Service conforms strictly to OpenID Connect 1.0 Client-Intitated Backchannel Authentication (CIBA) extension.   

    # Release Notes
      * 0.0.3 (1-Oct-2018)
        * Initial release of API
      * 2.0.0 (22-May-2019)
        * CIBA revamp of HSS APIs

    # Overview
      The Hash Signing(HSS) APIs are meant for developers of web-based signature applications (Web App accessed by users through the desktop or mobile browsers) to interface with the NDI Hash Signing Service(HSS), so that citizens can use their NDI Mobile App to sign documents that can be archived and verified for long-term non-repudiation purposes.
      
    # Functional Flow
      There is a 2-part process for Digital Signing Partners (DSPs) or Relying Parties (RPs) to integrate with NDI's HSS. The diagram below illustrates a high-level overview of the functional flow.
          
      <b> First Leg </b>

      <img src="./img/first-leg.png"></img>
      
      1. The first leg begins with the RP/DSP initiating a GET call to the QR authentication endpoint. This results in a signature reference object that is meant to be encoded as a QR image and displayed on the front-end of the DSP/RP's application.
      
      2. The end-user shall use his/her NDI Mobile App to scan the QR. This will result in the capturing of the QR Content. Implicitly, the user also provides consent to allow the release of his/her public certificate to the RP/DSP.
      
      3. The end user's form-factor invokes HSS's internal endpoint that results in a document signing session created on HSS's backend. The user's public certificate is also passed to HSS via this endpoint
    
      4. The user certificate shall be sent to the RP/DSP via its registered Client Notification Endpoint. The signature ref ID and several other CIBA parameters will be passed alongside the user certificate via this endpoint as well. Thus, concluding the first leg.
      
      <b> Second Leg </b>

      <img src="./img/second-leg.png"></img>
      
      1. The second leg begins with the RP/DSP initiating a POST call to HSS's sign-hash endpoint. The RP/DSP shall make use of this endpoint to pass the PadEs document hash, challenge code and signature reference ID to HSS. A valid request shall return the user's signature over the document hash. Do  note that the response timing of the sign-hash endpoint relies on user-interaction. Thus, a prolonged HTTP connection has to be maintained between the RP/DSP and NDI's HSS
      
      2. The HSS displays the 6-digit challenge code and document hash on the user's form factor. The end-user is then requested to consent on signing on the displayed document hash.
      
      3. The resultant signature shall be sent to the RP/DSP via the prolonged connection from Step 1 of Second Leg. Thus, concluding the second leg.

#These are the tags for the side bar (the one on the left)
tags:

  - name: Hash Signing Service
    description: >-
      These end points are called to perform hash signing where a signed user hash 
      could be returned and used to generate a digitally signed document hash.

#x-Tag groups are used to further group the tags
x-tagGroups:

  - name: HSS First Leg
    tags:
      - QR Authentication Endpoint for Hash Signing Service
      - Internal Endpoint for interaction between NDI Mobile and HSS
      - Client Notification Endpoint

  - name: HSS Second Leg
    tags:
      - Hash Signing Endpoint

#=============================== API start ===========================



paths:
  '/signatures/sign-ref':
    get:
      tags:
       - QR Authentication Endpoint for Hash Signing Service
      summary: Getting a Signature reference ID for QR Display
      description: |
        HSS QR Authentication Endpoint. The client shall invoke this endpoint to retrieve a signature reference ID that shall be displayed as a QR-encoded image. This authentication endpoint is the start of the Client-Intitated Backchannel Authetication (CIBA) [Push Mode flow](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html#rfc.section.5). The NDI mobile App returns the public certificate of the user from the mobile soft token (via the client's callback uri). The client may then optionally proceed with the creation of a PAdES document hash, which may require OCSP responses and timestamp tokens.
      operationId: getSignatureReference
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string

        - name: nonce
          in: query
          required: true
          schema:
            type: string

        - name: client_notification_token
          in: query
          required: true
          schema:
            type: string

        - name: login_hint
          in: query
          required: false
          schema:
              type: string

        - name: response_type
          in: query
          required: true
          schema:
            type: string

        - name: scope
          in: query
          required: false
          schema:
            type: string

      responses:
        '200':
          description: "A Signature Reference ID Object containing information for the RP to encode and display as a QR"
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/signatureReferenceIdentifier"
        '400':
          description: "Forbidden"
          content:
            application/json:    
              schema:
                $ref: "#/components/schemas/oidcError"

  '/signatures/sign-ref/{sign-ref}': 
    post:
      tags:
       - Internal Endpoint for interaction between NDI Mobile and HSS
      summary: Creation of a Signature Reference (Internal)
      description: >- 
        This is an endpiont exposed internally by the HSS (Note: Only meant to be invoked by the NDI Mobile/Form-Factor).
        The NDI mobile App (Form-factor) shall utilize this method to send the end-user's public certificate to the HSS as well. This relies on a prolong HTTP connection and the response shall be a document hash and challenge code generated by the RP/DSP.
      operationId: createSignatureReference
      requestBody:
        description: Optional description in *Markdown*
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/signatureReferenceCreationRequest'
      parameters:
        - name: sign-ref
          in: path
          required: true
          schema:
            type: string

      responses:
        '201':
          description: "An object containing the document hash and 6-digit challenge code from the RP/DSP"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/signatureReferenceCreationResponse'

        '400':
          description: "Forbidden"

  '/ndi/callback':
    get:
      tags:
          - Client Notification Endpoint
      summary: Client Notification Endpoint (web-hook)
      description: >-  
        This is the registered Client Notification Endpoint that RPs or Digital Signing Platforms (DSP) would expose as a webhook/callback. This webhook/callback will be a means for the RP/DSP to receive the respective end user's public certificate in a sub claim (presented as a claim in a jwt). According to OpenID Connect's CIBA Specifications, this endpoint must enforce TLS on NDI's HSS and requests to this endpoint must be authenticated using a bearer token (Authorization Header) created by the Client. This bearer token must be the same "client_notification_token" that was passed to NDI's HSS in the QR Authentication Endpoint phase.
        
      operationId: clientNotificationEndpoint
      
      parameters:
        - name: usr_cert
          in: query
          required: true
          schema:
            type: string

        - name: sign_ref
          in: query
          required: true
          schema:
            type: string
      
        - name: Authorization
          in: header
          required: true
          schema:
            $ref: "#/components/schemas/basicHttpAuthorization"
            
      responses:
        '200':
          description: Success. The Document Signing Session has resulted in the end-user's public certificate sent to the DSP/RP.
        '400':
          description: "Error"

  '/signatures/sign-hash':
    post:
      tags:
          - Hash Signing Endpoint
      summary: Allows the RP/DSP to request the end-user to sign on a well-formed PaDES document hash.
      description: >-  
        This is the endpoint called by RP/DSP to trigger notification on the user's form-factor to solicit user consent for signing on a document hash. This relies on a prolonged HTTP connection and returns the user's signature over the document hash. 
        
      operationId: hashSigningService
      parameters:
              - name: Authorization
                in: header
                required: true
                schema:
                  $ref: "#/components/schemas/basicHttpAuthorization"
            
      requestBody:
        content:
            application/json:
                schema:
                   $ref: "#/components/schemas/userSignatureNotificationRequest"

      responses:
        '201':
          description: Created. Returns another Signature Reference ID meant for the RP/DSP to keep track of.
          content:
              application/json:
                schema: 
                  $ref: "#/components/schemas/userSignature"
        '400':
          description: "Error"

components:
  schemas:
    
    basicHttpAuthorization : 
      type: string
      description: A base64 encoded string concatenated client_id, ':' and client_secret
    
    signatureReferenceIdentifier : 
     type: object
     properties:
        auth_req_id:
          type: string
          description: In accordance to the OpenID Connect Client Initiated Backchannel
            Authentication Push Flow, this is a unique identifier to identify the authentication
            request made by the Client. It MUST contain sufficient entropy (a minimum of
            128 bits while 160 bits is recommended) to make brute force guessing or forgery
            of a valid auth_req_id computationally infeasible - the means of achieving this
            are implementation specific, with possible approaches including secure pseudorandom
            number generation or cryptographically secured self-contained tokens.
          minLength: 3
          maxLength: 255
        expires_in:
          type: number
          description: unix timestamp in seconds that indicates when the Document Signing
            Session expires
        sign_ref:
          type: string
          description: A unique identifier in the format of a UUIDv4. This identifies the
            Document Signing Session and should be QR-encoded by the RP/Document-Signing Platform OR kept as a session by the RP/DSP.
        nonce:
          type: string
     required:
      - auth_req_id
      - expires_in
      - sign_ref
      - nonce

    oidcError : 
      type: object
      properties:
        error:
          type: string
          minLength: 3
          maxLength: 255
      required:
      - error
      enum:
      - invalid_request
      - invalid_client
      - invalid_grant
      - unauthorized_client
      - unsupported_grant_type
      - invalid_scope

    signatureReferenceCreationRequest :
      type: object
      properties:
        client_id:
          type: string
          description: The Relying Party's Client Identifier
          minLength: 32
          maxLength: 255
        nonce:
          type: string
        client_notification_token:
          type: string
          description: The client notification token captured from the QR code
        login_hint:
          type: string
          description: The login_hint captured from the QR Code
        response_type:
          type: string
          description: response_type captured from the QR Code
        x5c:
          type: string
          description: The End User's public certificate (For Document Signing)
        scope:
          type: string
          description: Scope captured from the QR
      required:
      - client_id
      - client_notification_token
      - response_type
      - x5c
      - scope
      
    signatureReferenceCreationResponse :
      type: object
      properties:
        doc_hash:
          type: string
          description: The PadEs document hash formed by the RP/DSP
          minLength: 32
          maxLength: 255
        challenge_code:
          type: string
          description: 6 Digit challenge code meant for display on the user's form factor for verification
        scope:
          type: string
          description: Scope captured from the QR
      required:
      - client_id
      - client_notification_token
      - response_type
      - x5c
      - scope
      
    userSignatureNotificationRequest :
      type: object
      properties:
        doc_hash:
          type: string
          description: The PadEs document hash formed by the RP/DSP
        challenge_code:
          type: number
          description: 6 Digit challenge code meant for display on the user's form factor for verification
        sign_ref:
          type: string
          description: A unique identifier in the format of a UUIDv4. This identifies the Document Signing Session.
      required:
      - doc_hash
      - challenge_code
      - sign_ref
      
    userSignature :
      type: object
      properties:
        signature:
          type: string
          description: The user's signature over the document hash

externalDocs:
  description: Find out more about NDI here.
  url: 'https://www.ndi-api.gov.sg'