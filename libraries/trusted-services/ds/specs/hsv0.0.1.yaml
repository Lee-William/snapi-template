#Default Parameters needed for a YAML file
openapi: 3.0.0
servers:
  - url: 'https://ndi.sg.io:3035/api/v1' #Real API link
    description: NDI API
    variables: {}
  - url: 'https://sandbox.ndi.io:3031/api/v1' #sandbox API link
    description: NDI API Sandbox
info:
  description: >-
    This is the API store where you can discover everything about integrating
    with the National Digital Identity (NDI) platform.  You can find out more
    about NDI at [http://ndi.sg.io/home](http://ndi.sg.io/home).  To try out the
    API, first go to the Authorization section to learn how to obtain an access
    token to access the API.

    # POST /sign/request.
    OAuth2.0 authorization endpoint. The client call this endpoint to start
    the OAuth2.0 flow.  The client redirects the user agent to this endpoint,
    which typically returns a login page for the user to enter his
    credentials for authentication.  In the case of NDI ASP, the login page
    consists only the user id input (i.e. no password input) where the user
    enter his NDI id. The ASP then routes an authentication challenge to the
    user's form factor (e.g. the soft token on his mobile device) via the
    appropriate form factor authentication servce. For mobile soft token, the
    user is notified to enter his PIN to unlock the soft token to sign on the
    authentication challenge.  The signed response is returned to the ASP
    which verifies the signature on the signed response with the user's
    certificate.  If all is well, the ASP generates an authorization code and
    sends it to the client via the client's redirect uri.  The client may then
    exchange for the security tokens (i.e. id token and access token) using the
    authorization code in accordance to the authorization code grant flow.


    # GET /sign/request.

    # POST response
    POST responses
    This is the callback endpoint called by the form factor (or form factor
    auth service) to return the signed response to the originating HSS of the
    authentication challenge.
    The request body: consists of the following fields:
    ff_auth_ref - the form factor authentication reference;
    usr_action - this may be 'accept', 'consent' or 'reject';
    response - the signed response (an encoded JWS), this is not present if
    usr_action is 'reject';


    # POST /auth/login
    Verify identity and generate auth code.  This is called by the login page
    when the user click Verify (submit) button, to pass over the user
    credentials for identity verification.
    This should be a POST rather than GET and all the params should be in
    the body instead of exposed in the url.



     # POST /token


    Token endpoint.
    This is where the client app call to exchange for the access token with an
    auth code.


    GET getJWKSet.
    Get the JSON Web Key (JWK) Set containing the signing keys of this ASP.
    The signing keys (public keys) are used by the form factor local agent (or
    the form factor authenticator) to verify the signed challenges sent by the
    ASP. The signing key to use is indicated by the kid value in the header
    of the signed challenge JWS. The JWK set should be downloaded periodically
    as the ASP refreshes its signing keys regularly.
    Response: the response body contains the JWK Set.

    # /.well-known/openid-configuration
    GET getOpenidConfig.
    Get the OpenID Connect discovery document of this ASP. The discovery
    document is downloaded by relying parties to find out the onfiguration of
    and capabilities supported by the ASP e.g. authorization url, token url,
    etc.  Relying parties should download the discovery document periodically
    as ASP configuration may change from time to time.
    Response: the response body contains the discovery document.


  version: 1.0.0
  title: National Digital Identity (NDI) - Hash Signing
  termsOfService:
  contact:
    email: support@ndi.gov.sg

externalDocs:
  description: Access technical reference for Hash Signing Service. (WIP)
  url: 'https://isomerpages.github.io/isomerpages-ndi/files/techref/hsproviders/hsprov'

#These are the tags for the side bar (the one on the left)
tags:
  - name: Hash Signing Service
    description: Hash Signing Service


paths:
  '/sign/request':
    get:
      tags:
       - Hash Signing Service
      summary: Callback endpoint to get hash as part of the signing request.
      description: >-
        Callback endpoint called by the form factor (or form factor signing service) to get the hash as part of the signing request. This is can be called by the form factor, when it received a push notification or when the user access the mobile application directly
      operationId: signRequest
      parameters:
      - name: client_id
        in: query
        required: true
        schema:
          type: string

      - name: nonce
        in: query
        required: true
        schema:
          type: string

      - name: scope
        in: query
        required: false
        schema:
          type: string

      - name: response_type
        in: query
        required: false
        schema:
          type: string

      - name: redirect_uri
        in: query
        required: false
        schema:
          type: string

      - name: state
        in: query
        required: false
        schema:
          type: string

      - name: login_hint
        in: query
        required: false
        schema:
            type: string

      - name: acr_values
        in: query
        required: false
        schema:
            type: string

      responses:
        '200':
          description: "Success"

        '400':
          description: "Error"

  '/sign/responses':
    post:
      tags:
          - Hash Signing Service
      summary: Callback endpoint to be called to return the signed hash
      description: Callback endpoint called by the form factor (or form factor signing service) to return the signed hash to the originating HSS of the signing request.
      operationId: signedData
      requestBody:
        content:
            application/json:
                schema:
                    type: object
                    properties:
                      ff_auth_ref:
                          description: The form factor authentication reference
                          type: string
                      usr_action:
                          description: This may be accept, consent or reject
                          type: string

      responses:
        '200':
          description: Success,The signed response, this is not present if usr_action is reject.
        '400':
          description: "Error"

# GET /signatures/signHash
'/signatures/signHash':
    get:
      tags:
        - User Authentication
      summary: Initiate user authentication or authorization (GET)
      description: >-
        HSS signHash endpoint. The client call this endpoint to provide the sign request.
        This endpoint also accepts ODIC id_token and OAuth2 access_token where provided.
        The client can obtain the security tokens from the ASP authorization endpoint, which
        supports a few ways to perform user authentication (See ASP authorization endpoint)
        e.g. ascertain user identity before displaying the yet-to-be-signed document.
        On the other hand, the client can interact directly this endpoint directly to provide
        the sign request:
        1. Use the standard NDI Login page for user identification.  The client
        redirects the user agent to this endpoint including the sign request, which
        returns the NDI Login page for the user to enter his credentials for authentication.
        The login consists only the user id input (i.e. no password input) for the user enter
        his NDI id. The HSS will use the NDI id initiate sign request to user's form factor.
        2. The client uses its own login page to capture the user NDI id, and calls
        this endpoint passing-on the NDI id.  For both 1. and 2. the HSS routes the specific
        sign request to the user's form factor (e.g. the soft token on
        his mobile device) via the appropriate form factor authentication servce.
        For mobile soft token, the user is notified to enter his PIN in the NDI mobile App
        to unlock the soft token to sign on the document hash.
        3. Use QR code.  The client calls this endpoint to request for a QR code which encodes
        the sign request, it then displays on its web app to let the user scan with his NDI App.
        4. If the client is a trusted mobile app, it may interact with the NDI mobile App
        through the NDI mobile SDK, which calls this endpoint to provide the sign request.
        For both 3. and 4. the NDI mobile App let the user enter his PIN to unlock the soft
        token to sign on the document hash.
        The NDI mobile App returns the signed response generated by the mobile soft token
        to the HSS (through the HSS callback uri) which verifies the signature on
        the signed response with the user's certificate.  If all is well, the HSS
        generates generic signed response including the user's certifcate and sends it to the
        client via the client's callback uri (async flow). The client may then optionally proceed
        with the creation of the signature structure, which includes OCSP responses and timestamp tokens.
      operationId: initiateAuth
      parameters:
        - name: client_id
          in: query
          description: >-
            The client id of the calling client app.
          required: true
          schema:
            type: string

        - name: nonce
          in: query
          description: >-
            A random unqiue reference generated by the client, which will be
            included in the ID token returned by the ASP on successful user
            authentication. The client may use this to tie the ID token to a
            particular authenticated session.
          required: true
          schema:
            type: string

        - name: scope
          in: query
          description: >-
             The scope of access requested for, this is a string of space-
             delimited references representing protected resources;
          schema:
            type: string

        - name: response_type
          in: query
          description: >-
            The response type, may be code or idtoken. Default to code if not
            specified.
          required: false
          schema:
            type: string

        - name: state
          in: query
          description: >-
            The random string generated by the client to counter CSRF, if
            specified, the ASP will include it as part of the redirect url
            when returning the authorization code to the client's redirect
            uri.  The client is to match the value of the state returned with
            its copy to ensure the redirect is from the ASP.
          required: false
          schema:
            type: string

        - name: acr_values
          in: query
          description: >-
            {Description to be added}
          required: false
          schema:
            type: string

        - name: ndi_id
          in: query
          description: >-
            {Description to be added}
          required: false
          schema:
            type: string

        - name: prompt
          in: query
          description: >-
            {Description to be added}
          required: false
          schema:
            type: string

        - name: display
          in: query
          description: >-
            {Description to be added}
          required: false
          schema:
            type: string

      responses:
        '200':
          description: Success, the NDI Login page
          content:
            text/html:
              schema:
                  type: string
                  format: html
        '302':
          description: >
            If the NDI Id is provided, the ASP returns the authorization code
            via redirect to the client's redirect uri.
          content:
            text/html:
              schema:
                  type: string
                  format: html
        '500':
          description: Error
          content:
            application/json:
              schema:
                  type: object
                  properties:
                      err_msg :
                          description: error message
                          type: string
      security: []
    post:  #There is a GET and POST for authentication, therefore there is 2 diff separate one
      tags:
        - User Authentication
      summary: Initiate user authentication or authorization (POST)
      description: >-
        This works exactly the same as GET authentication above.
      operationId: initiateAuth
      security: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  description: The client id assigned to the client <b>(Mandatory)</b>
                  type: string

                nonce:
                  description: >-
                    A random unqiue reference generated by the client, which will be
                    included in the ID token returned by the ASP on successful user
                    authentication. The client may use this to tie the ID token to a
                    particular authenticated session. <b>(Mandatory)</b>
                  type: string

                  scope:
                    description: The scope of access required
                    type: string

                  response_type:
                    description: The response type, may be code or idtoken. Default to code if not specified.
                    type: string

                  state:
                    description: >-
                      The random string generated by the client to counter CSRF, if
                      specified, the ASP will include it as part of the redirect url
                      when returning the authorization code to the client's redirect
                      uri.  The client is to match the value of the state returned with
                      its copy to ensure the redirect is from the ASP.
                    type: string

                    acr_values:
                      description: >-
                        The client may capture the user's NDI Id using its UI instead of the
                        NDI Login page. To suppress the NDI Login page, it may pass the NDI
                        Id to the ASP by setting login_hint to the NDI Id and setting the
                        prompt parameter to none.
                      type: string

                    prompt:
                      description: >-
                        Description to be added
                      type: string

                  #sample Data for this call
                  example:
                    client_id: sample_client_id
                    nonce: Insert sample nonce here
                    scope: Insert sample scope here
                    response_type: Insert sample response type here
                    state: Insert sample state here
                    acr_values: Insert example here
                    prompt: Insert example here

      responses:
        '200':
          description: Success, the NDI Login page
          content:
            text/html:
              schema:
                  type: string
                  format: html
        '302':
          description: >
            If the NDI Id is provided, the ASP returns the authorization code
            via redirect to the client's redirect uri.
          content:
            text/html:
              schema:
                  type: string
                  format: html
        '500':
          description: Error
          content:
            description: Success, the NDI Login page
            content:
              text/html:
                schema:
                    type: string
                    format: html
