#Default Parameters needed for a YAML file
openapi: 3.0.0
servers:
  - url: 'https://sandbox.api.ndi.gov.sg/hss/api' #sandbox API link
    description: NDI API Sandbox
info:
  version: 0.0.3
  title: National Digital Identity (NDI) - Hash Signing API
  termsOfService: 'https://www.ndi-api.gov.sg/termsofuse/'
  contact:
    email: ndi_support@ndi.gov.sg
  x-logo:
    url: '/assets/lib/trusted-access/img/ndi-logo-sm.png'
  description: |
    This is the API store where you can discover everything about integrating
    with the National Digital Identity (NDI) platform's hash signing service.   

    # Release Notes
      * 0.0.3 (1-Oct-2018)
        * Initial release of API

    # Overview
      The Hash Signing(HSS) APIs are meant for developers of web-based signature applications (Web App accessed by users through the desktop or mobile browsers) to interface with the NDI Hash Signing Service(HSS), so that citizens can use their NDI digital identity for signing.  

#These are the tags for the side bar (the one on the left)
tags:

  - name: Hash Signing Service
    description: >-
      These end points are called to perform hash signing where a signed user hash 
      could be returned and used to generate a digitally signed document.

#x-Tag groups are used to further group the tags
x-tagGroups:
  - name: API Definitions
    tags:
      - Hash Signing Service

#=============================== API start ===========================
paths:
  '/v1/hss/signatures/signHash':
    post:
      tags:
       - Hash Signing Service
      summary: Sign Hash
      description: >- 
        HSS signHash endpoint. The client call this endpoint to provide the sign request. This endpoint also accepts ODIC id_token and OAuth2 access_token where provided. The client can obtain the security tokens from the ASP authorization endpoint, which supports a few ways to perform user authentication (See ASP authorization endpoint) e.g. ascertain user identity before displaying the yet-to-be-signed document.
        On the other hand, the client can interact directly this endpoint directly to provide the sign request:
          1. Use the standard NDI Login page for user identification.  The client redirects the user agent to this endpoint including the sign request, which returns the NDI Login page for the user to enter his credentials for authentication. The login consists only the user id input (i.e. no password input) for the user enter his NDI id. The HSS will use the NDI id initiate sign request to user's form factor.
          2. The client uses its own login page to capture the user NDI id, and calls this endpoint passing-on the NDI id.  For both 1. and 2. the HSS routes the specific sign request to the user's form factor (e.g. the soft token on his mobile device) via the appropriate form factor authentication servce. For mobile soft token, the user is notified to enter his PIN in the NDI mobile App to unlock the soft token to sign on the document hash.
          3. Use QR code.  The client calls this endpoint to request for a QR code which encodes the sign request, it then displays on its web app to let the user scan with his NDI App. 4. If the client is a trusted mobile app, it may interact with the NDI mobile App through the NDI mobile SDK, which calls this endpoint to provide the sign request. For both 3. and 4. the NDI mobile App let the user enter his PIN to unlock the soft token to sign on the document hash.

        The NDI mobile App returns the signed response generated by the mobile soft token to the HSS (through the HSS callback uri) which verifies the signature on the signed response with the user's certificate.  If all is well, the HSS generates generic signed response including the user's certifcate and sends it to the client via the client's callback uri (async flow). The client may then optionally proceed with the creation of the signature structure, which includes OCSP responses and timestamp tokens.

      operationId: signHash
      parameters:
        - name: client_id
          in: query
          required: true
          schema:
            type: string

        - name: client_secret
          in: query
          required: true
          schema:
            type: string

        - clientData:
          - name: hash_alg
            in: query
            required: true
            schema:
              type: string
          - name: hash
            in: query
            required: true
            schema:
              type: string

        - name: nonce
          in: query
          required: true
          schema:
            type: string

        - name: login_hint
          in: query
          required: false
          schema:
              type: string

        - name: response_type
          in: query
          required: false
          schema:
            type: string

        - name: callback_uri
          in: query
          required: false
          schema:
            type: string

        - name: tx_id
          in: query
          required: false
          schema:
            type: string
            
        - name: tx_state
          in: query
          required: false
          schema:
            type: string            

        - name: tx_expiry
          in: query
          required: false
          schema:
            type: string

        - name: tx_doc_name
          in: query
          required: false
          schema:
            type: string

        - name: tx_vcode
          in: query
          required: false
          schema:
            type: string

        - name: scope
          in: query
          required: false
          schema:
            type: string

        - name: prompt
          in: query
          required: false
          schema:
            type: string

        - name: display
          in: query
          required: false
          schema:
            type: string

      responses:
        '200':
          description: "Success"

        '400':
          description: "Error"

  '/v1/hss/responses':
    post:
      tags:
          - Hash Signing Service
      summary: Responses
      description: >-  
        This is the callback endpoint called by the form factor (or form factor auth service) to return the signed response to the originating HSS of the authentication challenge.
      operationId: responses
      requestBody:
        content:
            application/json:
                schema:
                    type: object
                    properties:
                      ff_auth_ref:
                        description: The form factor authentication reference
                        type: string
                      usr_action:
                        description: This may be accept, consent or reject
                        type: string
                      response: 
                        description: the signed response (an encoded JWS), this is not present if usr_action is 'reject';
                        type: string    

      responses:
        '200':
          description: Success,The signed response, this is not present if usr_action is reject.
        '400':
          description: "Error"

  '/v1/hss/responses/qrcodes':
    post:
      tags:
          - Hash Signing Service
      summary: Responses
      description: >-  
        This is the callback endpoint called by the form factor (or form factor auth service) to return the signed response to the originating HSS of the authentication challenge.
      operationId: qrresponses
      requestBody:
        content:
            application/json:
                schema:
                    type: object
                    properties:
                      oid_ref:
                        description: The hss reference for the request
                        type: string
                      usr_action:
                        description: This may be accept, consent or reject
                        type: string
                      response: 
                        description: the signed response (an encoded JWS), this is not present if usr_action is 'reject';
                        type: string
                      signedData:
                        type: object
                        properties:
                          signedHash:
                            description: This containes the sign value for the hash
                            type: string
                          certPEM:
                            description: This contains the digital certificate of the client
                            type: string

      responses:
        '200':
          description: Success,The signed response, this is not present if usr_action is reject.
        '400':
          description: "Error"

  '/v1/hss/certs':
    get:
      tags:
       - Hash Signing Service
      summary: certs
      description: >- 
        Get the JSON Web Key (JWK) Set containing the signing keys of this ASP. The signing keys (public keys) are used by the form factor local agent (or the form factor authenticator) to verify the signed challenges sent by the ASP. The signing key to use is indicated by the kid value in the header of the signed challenge JWS. The JWK set should be downloaded periodically as the ASP refreshes its signing keys regularly.

      operationId: certs

      responses:
        '200':
          description: "Success"

        '400':
          description: "Error"
          
externalDocs:
  description: Find out more about NDI here.
  url: 'https://www.ndi-api.gov.sg'